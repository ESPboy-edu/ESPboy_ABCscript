program
    global_stmt*

global_stmt
    type_name IDENT "(" decl_arg_list ")" compound_stmt
    type_name IDENT ";"

type_name
    "u8"
    "s8"
    "u16"
    "s16"

decl_arg_list
    <>
    type IDENT ("," type IDENT)*

compound_stmt
    "{" stmt* "}"

stmt
    ";"
    compound_stmt
    "if" "(" expr ")" stmt ["else" stmt]
    "while" "(" expr ")" stmt
    expr
    
expr
    assignment_expr
    expr "," assignment_expr

assignment_expr
    conditional_expr
    unary_expr assignment_operator assignment_expr

conditional_expr
    logical_or_expr
    logical_or_expr "?" expr ":" conditional_expr

logical_or_expr
    logical_and_expr
    logical_or_expr "||" logical_and_expr

logical_and_expr
    bitwise_or_expr
    logical_and_expr "&&" bitwise_or_expr

bitwise_or_expr
    bitwise_xor_expr
    bitwise_or_expr "|" bitwise_xor_expr

bitwise_xor_expr
    bitwise_and_expr
    bitwise_xor_expr "^" bitwise_and_expr

bitwise_and_expr
    equality_expr
    bitwise_and_expr "&" equality_expr

equality_expr
    relational_expr
    equality_expr "==" relational_expr
    equality_expr "!=" relational_expr
    
relational_expr
    shift_expr
    relational_expr "<" shift_expr
    relational_expr ">" shift_expr
    relational_expr "<=" shift_expr
    relational_expr ">=" shift_expr

shift_expr
    additive_expr
    shift_expr "<<" additive_expr
    shift_expr ">>" additive_expr

additive_expr
    multiplicative_expr
    additive_expr "+" multiplicative_expr
    additive_expr "-" multiplicative_expr

multiplicative_expr
    cast_expr
    multiplicative_expr "*" cast_expr
    multiplicative_expr "/" cast_expr
    multiplicative_expr "%" cast_expr

cast_expr
    unary_expr
    cast_expr "as" type_name

unary_expr
    postfix_expr
    "++" unary_expr
    "--" unary_expr
    "-" cast_expr
    "~" cast_expr
    "!" cast_expr

postfix_expr
    primary_expr
    postfix_expr "[" expr "]"
    postfix_expr "(" ")"
    postfix_expr "(" arg_list ")"
    postfix_expr "." IDENT
    postfix_expr "++"
    postfix_expr "--"

primary_expr
    IDENT
    CONSTANT
    "(" expr ")"

arg_list
    assignment_expr ["," assignment_expr]

