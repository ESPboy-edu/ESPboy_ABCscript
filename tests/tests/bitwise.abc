u8 [4] a1;
u16[4] a2;
u24[4] a3;
u32[4] a4;

u32[4] m;

void main()
{
    $debug_break();
    
    $assert(a1[2] == 0);
    $assert(a2[2] == 0);
    $assert(a3[2] == 0);
    $assert(a4[2] == 0);
    
    m[0] = 0x00000000;
    m[1] = 0xffffffff;
    m[2] = 0xcafebabe;
    m[3] = 0x12345678;
    
    for(u8 i = 0; i < 4; i = i + 1)
    {
        a1[i] = m[i];
        a2[i] = m[i];
        a3[i] = m[i];
        a4[i] = m[i];
    }

    for(u8 i = 1; i < 4; i = i + 1)
    {
        $assert((a1[0] & a1[i]) == 0);
        $assert((a1[0] & a2[i]) == 0);
        $assert((a1[0] & a3[i]) == 0);
        $assert((a1[0] & a4[i]) == 0);
        $assert((a2[0] & a2[i]) == 0);
        $assert((a2[0] & a3[i]) == 0);
        $assert((a2[0] & a4[i]) == 0);
        $assert((a3[0] & a3[i]) == 0);
        $assert((a3[0] & a4[i]) == 0);
        $assert((a4[0] & a4[i]) == 0);
        
        $assert((a1[0] | a1[i]) == a1[i]);
        $assert((a1[0] | a2[i]) == a2[i]);
        $assert((a1[0] | a3[i]) == a3[i]);
        $assert((a1[0] | a4[i]) == a4[i]);
        $assert((a2[0] | a2[i]) == a2[i]);
        $assert((a2[0] | a3[i]) == a3[i]);
        $assert((a2[0] | a4[i]) == a4[i]);
        $assert((a3[0] | a3[i]) == a3[i]);
        $assert((a3[0] | a4[i]) == a4[i]);
        $assert((a4[0] | a4[i]) == a4[i]);
    }
    
    for(u8 i = 2; i < 4; i = i + 1)
    {
        $assert((a1[1] & a1[i]) == a1[i]);
        $assert((a2[1] & a2[i]) == a2[i]);
        $assert((a3[1] & a3[i]) == a3[i]);
        $assert((a4[1] & a4[i]) == a4[i]);
        
        $assert((a1[1] & a2[i]) == u8(a2[i]));
        $assert((a1[1] & a3[i]) == u8(a3[i]));
        $assert((a1[1] & a4[i]) == u8(a4[i]));
        $assert((a2[1] & a3[i]) == u16(a3[i]));
        $assert((a2[1] & a4[i]) == u16(a4[i]));
        $assert((a3[1] & a4[i]) == u24(a4[i]));
        
        $assert((a1[1] | a1[i]) == 0xff);
        $assert((a2[1] | a2[i]) == 0xffff);
        $assert((a3[1] | a3[i]) == 0xffffff);
        $assert((a4[1] | a4[i]) == 0xffffffff);
    }
    
    a1[0] = 1;
    $assert(a1[0] << 0 == 1u << 0);
    $assert(a1[0] << 1 == 1u << 1);
    $assert(a1[0] << 2 == 1u << 2);
    $assert(a1[0] << 3 == 1u << 3);
    $assert(a1[0] << 4 == 1u << 4);
    $assert(a1[0] << 5 == 1u << 5);
    $assert(a1[0] << 6 == 1u << 6);
    $assert(a1[0] << 7 == 1u << 7);
    $assert(a1[0] << 8 == 0);
    
    a2[0] = 1;
    $assert(a2[0] <<  0 == 1u <<  0);
    $assert(a2[0] <<  1 == 1u <<  1);
    $assert(a2[0] <<  2 == 1u <<  2);
    $assert(a2[0] <<  3 == 1u <<  3);
    $assert(a2[0] <<  4 == 1u <<  4);
    $assert(a2[0] <<  5 == 1u <<  5);
    $assert(a2[0] <<  6 == 1u <<  6);
    $assert(a2[0] <<  7 == 1u <<  7);
    $assert(a2[0] <<  8 == 1u <<  8);
    $assert(a2[0] <<  9 == 1u <<  9);
    $assert(a2[0] << 10 == 1u << 10);
    $assert(a2[0] << 11 == 1u << 11);
    $assert(a2[0] << 12 == 1u << 12);
    $assert(a2[0] << 13 == 1u << 13);
    $assert(a2[0] << 14 == 1u << 14);
    $assert(a2[0] << 15 == 1u << 15);
    $assert(a2[0] << 16 == 0);
   
    $debug_break();
}
