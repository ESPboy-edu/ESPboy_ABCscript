constexpr sprites TILES = sprites{ 16x16 "assets/tiles.png" };
constexpr sprites OBJECTS = sprites{ 16x16 "assets/objects.png" };
constexpr sprites PLAYER = sprites{ 16x16 "assets/player.png" };
constexpr sprites IMG_KEY = sprites{ "assets/key.png" };
constexpr sprites IMG_HEART = sprites{ 10x8 "assets/heart.png" };
constexpr sprites BACKGROUND = sprites{ 128x64 "assets/background.png" };

constexpr font LEVEL_START_FONT = FONT_VOLTER;
constexpr font SCORE_FONT = font{ 9 "assets/score.ttf" };

void render()
{
    if(state == STATE_LEVEL)
        render_level();
    else if(state == STATE_INTRO || state == STATE_SCORE_TALLY)
        render_intro();
    else if(state == STATE_VICTORY)
        render_victory();
}

void render_intro()
{
    //$draw_text_P(55, 10, FONT_BR6, "Score");
    $draw_textf(43, 18, SCORE_FONT, "%06u", total_score);
    //$draw_rect(41, 16, 45, 13, WHITE);
    if(level_frames_remaining != 0)
    {
        $draw_text_P(25, -1, LEVEL_START_FONT, "Level Complete!");
        $draw_textf(41, 30, FONT_BR6, "%05u", score);
        char[10] buf;
        $format(buf, "%u.%02u",
            level_frames_remaining / 50,
            (level_frames_remaining % 50) * 2);
        u8 w = $text_width(FONT_BR6, buf);
        $draw_text(87 - w, 30, FONT_BR6, buf);
    }
    else
    {
        $draw_text_P(37, -1, LEVEL_START_FONT, "Get Ready!");

        if(current_map != 0)
        {
            constexpr u8 y = 16;
            $draw_text_P(94, y + 0, FONT_BR6, "Total Time");
            $draw_filled_rect(94, y + 6, 34, 1, WHITE);
            char[10] buf;
            $format(buf, "%u.%02u",
                total_time / 50,
                (total_time % 50) * 2);
            u8 w = $text_width(FONT_BR6, buf);
            $draw_text(111 - w / 2, y + 8, FONT_BR6, buf);
        }
    }
    if(current_map != 0 && state == STATE_INTRO)
    {
        if(was_best_time)
        {
            constexpr u8 y = 40;
            $draw_text_P(96, y - 7, FONT_BR6, "New Map");
            $draw_text_P(94, y + 0, FONT_BR6, "Best Time!");
            $draw_filled_rect(94, y + 6, 34, 1, WHITE);
            char[10] buf;
            u16 time_taken = TIME_LIMIT_FRAMES - level_frames_remaining;
            $format(buf, "%u.%02u",
                time_taken / 50,
                (time_taken % 50) * 2);
            u8 w = $text_width(FONT_BR6, buf);
            $draw_text(111 - w / 2, y + 8, FONT_BR6, buf);
        }
    }
    $draw_sprite(56, 37, PLAYER, 7 + ((frame_count >> 3) & 0x3));
    $draw_textf(72, 44, FONT_BR6, "x%u", lives);
    if((frame_count & 0x3f) < 0x30)
        $draw_text_P(44, 56, LEVEL_START_FONT, "Press A");
}

void render_victory()
{ 
    render_level();
}

void render_level()
{
    // setup
    int icamx = int($round(camx));
    int icamy = int($round(camy));

    // render map tiles
    {
        i8 cx = icamx / 16;
        i8 cy = icamy / 16;
        i8 xoff = -(icamx & 15);
        i8 yoff = -(icamy & 15);
        u8[] prog& m = maps[current_map].map;
        u8 w = map_width;

        // background pattern
        {
            constexpr u8 SHIFT = 2;
            i16 tx = -((icamx >> SHIFT) & 255);
            u16 h = map_height * 16 - (icamy + 64);
            i16 ty = ((h >> SHIFT) & 63);
            $draw_sprite(tx      , ty - 64, BACKGROUND, 0);
            $draw_sprite(tx + 128, ty - 64, BACKGROUND, 1);
            if(h >= 64 * (1 << SHIFT))
            {
                if(tx >= -128)
                    $draw_sprite(tx      , ty, BACKGROUND, 0);
                else
                    $draw_sprite(tx + 256, ty, BACKGROUND, 0);
                $draw_sprite(tx + 128, ty, BACKGROUND, 1);
            }
            else
            {
                if(tx >= -128)
                    $draw_sprite(tx      , ty, BACKGROUND, 2);
                else
                    $draw_sprite(tx + 256, ty, BACKGROUND, 2);
                $draw_sprite(tx + 128, ty, BACKGROUND, 3);
            }
        }

        for(u8 i = 0; i < 5; ++i)
        {
            u16 index = (i + cy) * w + cx;
            for(u8 j = 0; j < 9; ++j)
            {
                u8 t = m[index + j] - 1;
                if(t >= 240)
                    continue;
                if(t >= 176)
                    t += ((frame_count << 2) & 0x30);
                $draw_sprite(j * 16 + xoff, i * 16 + yoff, TILES, t);
            }
        }
    }

    // render objects
    {
        for(u8 i = 0; i < MAX_OBJECTS; ++i)
        {
            map_object_t obj = objects[i];
            u8 t = obj.type;
            if(t == OBJ_NONE)
                continue;
            
            u8 index;
            if(t >= OBJ_MOB && obj.death_frames != 0)
            {
                if(obj.death_frames & 0x4)
                    continue;
                else
                    index = t + 64;
            }
            else
            {
                index = t;
                if(death_frames == 0)
                    index += ((frame_count + i * 173) & 0x30);
            }

            $draw_sprite(
                obj.x - icamx, obj.y - icamy, OBJECTS,
                index);
        }
    }

    // render player
    if(invincibility_frames == 0 || (frame_count & 0x04) == 0)
    {
        u8 index = 0;
        if(player_facing_right)
            index += 7;
        if(player_on_ground)
        {
            if(player_moving)
                index += ((frame_count >> 3) & 3);
        }
        else
        {
            index += 4;
        }
        if(death_frames != 0)
            index = 5;

        float x = px - camx - PXOFF;
        i16 y = $round(py) - icamy - i16(PYOFF);
        $draw_sprite($round(x), y, PLAYER, index);
    }
   
    // render HUD elements
    for(u8 i = 0; i < MAX_HEARTS; ++i)
        $draw_sprite(119 - i * 9, 0, IMG_HEART, i < hearts);
    for(u8 i = 0; i < keys; ++i)
        $draw_sprite(119 - i * 9, 8, IMG_KEY, 0);
    $draw_filled_rect(0, 0, 20, 6, BLACK);
    $draw_textf(0, 0, FONT_BR6, "%05u", score);
    $draw_filled_rect(57, 0, 13, 6, BLACK);
    $draw_textf(58, 0, FONT_BR6, "%03u", u16(level_frames_remaining + 49) / 50);

    // render level start animation
    if(level_start_frames != 0)
    {
        //char[20] buf;
        //$format(buf, "Level %d", current_map + 1);
        //u8 w = $text_width(LEVEL_START_FONT, buf);
        char[] prog& name = maps[current_map].name;
        u8 w = $text_width_P(LEVEL_START_FONT, name);
        constexpr u8 y = 24;
        constexpr u8 h = 13;
        i16 x = 64 - w / 2;
        i16 xo = 0;
        constexpr u8 TRANSITION_FRAMES = 12;
        constexpr u8 END_FRAME = LEVEL_START_FRAMES - TRANSITION_FRAMES;
        if(level_start_frames >= END_FRAME)
            xo += (level_start_frames - END_FRAME) * 10;
        if(level_start_frames <= TRANSITION_FRAMES)
            xo -= (TRANSITION_FRAMES - level_start_frames) * 10;
        $draw_filled_rect(xo, y - 1, 128, h, BLACK);
        //$draw_text(x, y, LEVEL_START_FONT, buf);
        $draw_text_P(x + xo, y, LEVEL_START_FONT, name);

        --level_start_frames;
    }
}
