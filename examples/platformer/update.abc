bool solid(float x, float y)
{
    int ix = $floor(x);
    int iy = $floor(y);

    // collision against left map edge
    if(ix < 0)
        return true;
    
    // allow the player to shoot into the sky
    if(iy < 0)
        return false;

    ix >>= 4;
    iy >>= 4;
    u8 w = map_width();

    // collision against right map edge
    if(ix >= w)
        return true;

    // allow the player to fall through the floor
    if(iy >= map_height())
        return false;
    u8 t = maps[current_map].map[iy * w + ix];
    if(t == 0) return false;
    t += 1;
    if(t < 64) return true;
    if(t < 96 && vy > 0) return true;
    return false;
}

void update()
{
    $poll_buttons();

    // player acceleration
    float ax = 0;
    float ay = 0;

    player_moving = (vx < -0.3 || vx > 0.3);

    // apply user input
    if($pressed(LEFT_BUTTON ))
    {
        ax -= PLAYER_MOVE_ACCEL;
        player_facing_right = false;
        player_moving = true;
    }
    if($pressed(RIGHT_BUTTON))
    {
        ax += PLAYER_MOVE_ACCEL;
        player_facing_right = true;
        player_moving = true;
    }

    if(player_on_ground && $just_pressed(A_BUTTON))
    {
        vy -= PLAYER_JUMP_VEL;
    }

    // apply friction
    ax += (-PLAYER_FRICTION * vx);

    // apply gravity
    ay += GRAVITY;

    // player velocity update
    vx += ax;
    vy += ay;

    // clamp velocity
    if     (vx < -PLAYER_MAX_VEL_X) vx = -PLAYER_MAX_VEL_X;
    else if(vx >  PLAYER_MAX_VEL_X) vx =  PLAYER_MAX_VEL_X;
    if     (vy < -PLAYER_MAX_VEL_Y) vy = -PLAYER_MAX_VEL_Y;
    else if(vy >  PLAYER_MAX_VEL_Y) vy =  PLAYER_MAX_VEL_Y;

    // player position update
    px += vx;
    py += vy;

    player_on_ground = false;

    // resolve collision: bottom
    if( solid(px - (PHEH - 1), py + PHEV) ||
        solid(px + (PHEH - 1), py + PHEV) )
    {
        vy = 0;
        py -= $mod(py + (PHEV + 0.1), 16);
        player_on_ground = true;
    }

    // resolve collision: top
    else if( solid(px - (PHEH - 1), py - PHEV) ||
             solid(px + (PHEH - 1), py - PHEV) )
    {
        vy = 0;
        py -= $mod(py - (PHEV + 0.1), 16);
    }

    // resolve collision: left
    if( solid(px - PHEH, py - (PHEV - 1)) ||
        solid(px - PHEH, py + (PHEV - 1)) )
    {
        vx = 0;
        px -= $mod(px - (PHEH + 0.1), 16);
    }

    // resolve collision: left
    else if( solid(px + PHEH, py - (PHEV - 1)) ||
             solid(px + PHEH, py + (PHEV - 1)) )
    {
        vx = 0;
        px -= $mod(px + (PHEH + 0.1), 16);
    }

    ++frame_count;
}
