void update()
{
    $poll_buttons();

    // player acceleration
    float ax = 0;
    float ay = 0;

    player_moving = (vx < -0.3 || vx > 0.3);

    // apply user input: move left and right
    {
        float a = PLAYER_MOVE_AIR_ACCEL;
        if(player_on_ground)
            a = PLAYER_MOVE_ACCEL;

        if($pressed(LEFT_BUTTON ))
        {
            ax -= a;
            player_facing_right = false;
            player_moving = true;
        }
        if($pressed(RIGHT_BUTTON))
        {
            ax += a;
            player_facing_right = true;
            player_moving = true;
        }
    }

    // apply user input: jump
    if(player_on_ground && $just_pressed(A_BUTTON))
    {
        jump_frames_remaining = PLAYER_JUMP_FRAMES;
        $tones_play(SOUND_JUMP);
    }

    if(!$pressed(A_BUTTON))
        jump_frames_remaining = 0;
    else if(jump_frames_remaining != 0)
    {
        --jump_frames_remaining;
        if(vx < -PLAYER_FAST_VEL || vx > PLAYER_FAST_VEL)
            vy = -PLAYER_JUMP_VEL_FAST;
        else
            vy = -PLAYER_JUMP_VEL;
    }

    // tile effects of the player's centered tile
    {
        u8 ix = u16($floor(px)) >> 4;
        u8 iy = u16($floor(py)) >> 4;
        u8 w = map_width;
        u8 h = map_height;
        if(ix < w && iy < h)
        {
            u8 t = maps[current_map].map[iy * w + ix];
            if(t != 0)
            {
                --t;
                if(t == TILE_AIR_UP)
                    vy += (-FAN_AIR_VEL - vy) * FAN_AIR_FACTOR;
                else if(t == TILE_AIR_RIGHT)
                    vx += (FAN_AIR_VEL - vx) * FAN_AIR_FACTOR;
            }
        }
    }

    // apply friction
    if(player_on_ground)
        ax += (-PLAYER_FRICTION * vx);
    else
        ax += (-PLAYER_FRICTION_AIR * vx);

    // apply gravity
    ay += GRAVITY;

    // player velocity update
    vx += ax;
    vy += ay;

    // clamp velocity
    if     (vx < -PLAYER_MAX_VEL_X) vx = -PLAYER_MAX_VEL_X;
    else if(vx >  PLAYER_MAX_VEL_X) vx =  PLAYER_MAX_VEL_X;
    if     (vy < -PLAYER_MAX_VEL_Y) vy = -PLAYER_MAX_VEL_Y;
    else if(vy >  PLAYER_MAX_VEL_Y) vy =  PLAYER_MAX_VEL_Y;

    // player position update
    px += vx;
    py += vy;

    // just to be safe, clamp player position to the left and right
    {
        float xmax = map_width * 16 - PHEH;
        if(px < PHEH) px = PHEH;
        if(px > xmax) px = xmax;
    }

    if(player_on_ground != 0)
        --player_on_ground;

    // resolve collision: left
    if(vx < 0 && (
        solid(px - PHEH, py - (PHEV - 1), false) ||
        solid(px - PHEH, py + (PHEV - 1), false) ))
    {
        float t = 16 - $mod(px - (PHEH - 0.1 - 16), 16);
        if(t <= PLAYER_MAX_VEL_X)
            px += t;
    }

    // resolve collision: left
    else if(vx > 0 && (
        solid(px + PHEH, py - (PHEV - 1), false) ||
        solid(px + PHEH, py + (PHEV - 1), false) ))
    {
        float t = $mod(px + (PHEH - 0.1), 16);
        if(t <= PLAYER_MAX_VEL_X)
            px -= t;
    }

    // resolve collision: top
    else if(vy < 0 && (
        solid(px - (PHEH - 1), py - PHEV, false) ||
        solid(px + (PHEH - 1), py - PHEV, false) ))
    {
        float t = 16 - $mod(py - (PHEV - 0.1 - 16), 16);
        if(t <= PLAYER_MAX_VEL_Y)
            py += t;
    }

    // resolve collision: bottom
    if(vy > 0 && (
        solid(px - (PHEH - 1), py + PHEV, true) ||
        solid(px + (PHEH - 1), py + PHEV, true) ))
    {
        float t = $mod(py + (PHEV - 0.1), 16);
        if(t <= PLAYER_MAX_VEL_Y)
        {
            vy = 0;
            py -= t;
            player_on_ground = PLAYER_ON_GROUND_FRAMES;
        }
    }

    // map object updates
    {
        i16 px0 = $round(px) + i16(-PXOFF + 1);
        i16 py0 = $round(py) + i16(-PYOFF + 1);
        i16 px1 = px0 + i16(PHEH * 2 - 1);
        i16 py1 = py0 + i16(PHEV * 2 - 1);
        mob_jumped = false;
        for(u8 i = 0; i < MAX_OBJECTS; ++i)
        {
            map_object_t& obj = objects[i];
            if(obj.type == OBJ_NONE)
                continue;

            if(obj.type >= OBJ_MOB && ((frame_count + i) & 1))
                update_mob(obj);

            // test if player is colliding with object
            i16 x = obj.x + obj.xo;
            i16 y = obj.y + obj.xo;
            if( px1 >= x &&
                py1 >= y &&
                px0 < i16(x + obj.w) &&
                py0 < i16(y + obj.h))
            {
                touch_object(obj);
            }
        }
        if(mob_jumped)
        {
            vy = -2.0;
            jump_frames_remaining = PLAYER_JUMP_FRAMES;
            $tones_play(SOUND_MOB_JUMP);
        }
    }

    // update camera position
    {
        float tcamy = py - CAMERA_OFFSET_Y;
        float tcamx = px - CAMERA_OFFSET_X;
        float xmax = map_width * 16 - 129;
        float ymax = map_height * 16 - 65;
        if(player_facing_right)
            tcamx += CAMERA_OFFSET_X_DELTA;
        else
            tcamx -= CAMERA_OFFSET_X_DELTA;
        if($pressed(UP_BUTTON))
            tcamy -= CAMERA_OFFSET_Y_DELTA_UP;
        if($pressed(DOWN_BUTTON))
            tcamy += CAMERA_OFFSET_Y_DELTA_DOWN;
        if(tcamx < 0) tcamx = 0;
        if(tcamy < 0) tcamy = 0;
        if(tcamx > xmax) tcamx = xmax;
        if(tcamy > ymax) tcamy = ymax;
        camy += (tcamy - camy) * CAMERA_UPDATE_Y_FACTOR;

        float d2camx =
            (tcamx - camx) * CAMERA_UPDATE_X_ALPHA -
            dcamx * CAMERA_UPDATE_X_BETA;
        camx += dcamx * CAMERA_UPDATE_X_DT;
        dcamx += d2camx * CAMERA_UPDATE_X_DT;
    }

    if(invincibility_frames != 0)
        --invincibility_frames;

    // check if player has fallen out of the bottom of the level
    if(py > map_height * 16 + 32)
        player_death();

    ++frame_count;
}

void player_death()
{
    // TODO: death animation
    load_map(current_map);
}

bool solid(float x, float y, bool bottom)
{
    int ix = $floor(x);
    int iy = $floor(y);

    // collision against left map edge
    if(ix < 0)
        return true;
    
    // allow the player to shoot into the sky
    if(iy < 0)
        return false;

    ix >>= 4;
    iy >>= 4;
    u8 w = map_width;

    // collision against right map edge
    if(ix >= w)
        return true;

    // allow the player to fall through the floor
    if(iy >= map_height)
        return false;
    u8 t = maps[current_map].map[iy * w + ix];
    t -= 1;
    if(t >= 240) return false;
    if(t < 64) return true;
    if(bottom && t < 96) return true;
    if(t >= 176 && (t & 15) >= 8) return true;
    return false;
}

void update_mob(map_object_t& obj)
{
    if(obj.death_frames != 0)
    {
        obj.death_frames = obj.death_frames - 1;
        if(obj.death_frames == 0)
            obj.type = OBJ_NONE;
        return;
    }
    if(obj.moving_right)
    {
        obj.x += 1;
        i16 x = obj.x + obj.xo + obj.w;
        if(mob_solid(x, obj.y + 8, false) || !mob_solid(x, obj.y + 16, true))
        {
            obj.x -= 1;
            obj.moving_right = false;
        }
    }
    else
    {
        obj.x -= 1;
        float x = obj.x + obj.xo - 1;
        if(mob_solid(x, obj.y + 8, false) || !mob_solid(x, obj.y + 16, true))
        {
            obj.x += 1;
            obj.moving_right = true;
        }
    }
}

bool mob_solid(i16 x, i16 y, bool bottom)
{
    // collision against left map edge
    if(x < 0)
        return true;
    
    // allow the mob to fly above the map
    if(y < 0)
        return false;

    x >>= 4;
    y >>= 4;
    u8 w = map_width;

    // collision against right map edge
    if(x >= w)
        return true;

    // allow the mob to fall through the floor
    if(y >= map_height)
        return false;
    u8 t = maps[current_map].map[y * w + x];
    t -= 1;
    if(t >= 240) return false;
    if(t < 64) return true;
    if(bottom && t < 96) return true;
    if(t >= 176 && (t & 15) >= 8) return true;
    return false;
}

void touch_object(map_object_t& obj)
{
    u8 type = obj.type;
    if(type == OBJ_COIN)
    {
        score += 100;
        obj.type = OBJ_NONE;
        $tones_play(SOUND_COIN);
    }
    else if(type == OBJ_KEY)
    {
        keys += 1;
        obj.type = OBJ_NONE;
        $tones_play(SOUND_KEY);
    }
    else if(type == OBJ_SPRING)
    {
        vy = -PLAYER_SPRING_VEL;
        $tones_play(SOUND_SPRING);
    }
    else if(type >= OBJ_MOB && type <= OBJ_MOB_HELM)
    {
        if(obj.death_frames != 0)
            return;
        if(type == OBJ_MOB_HORN || py > obj.y + obj.yo || vy <= 0)
        {
            if(invincibility_frames == 0 && obj.death_frames == 0)
                player_death();
        }
        else if(!mob_jumped)
        {
            mob_jumped = true;
            py -= vy;
            if(type == OBJ_MOB_HELM)
                obj.type = OBJ_MOB;
            else
                obj.death_frames = MOB_DEATH_FRAMES;
        }
    }
}
