import vars;

struct map_info_t
{
    u8[] prog& map;
    u8 w, h;
};

void load_map()
{
    player_facing_right = true;
    keys = 0;
    invincibility_frames = INVINCIBILITY_LEVEL_START;
    jump_frames_remaining = 0;
    vx = 0;
    vy = 0;
    level_start_frames = 75;
    death_frames = 0;
    state = STATE_LEVEL;
    score = total_score;
    hearts = MAX_HEARTS;

    u8[] prog& map = maps[current_map].map;
    u8 w = maps[current_map].w;
    u8 h = maps[current_map].h;
    map_width = w;
    map_height = h;

    // reset map objects
    for(u8 i = 0; i < MAX_OBJECTS; ++i)
        objects[i] = { 0, 0, OBJ_NONE };
    
    // look through all map tiles for objects
    for(u8 y = 0; y < h; ++y)
    {
        for(u8 x = 0; x < w; ++x)
        {
            u8 t = map[y * w + x] - 1;
            process_map_tile(x, y, t);
        }
    }

    $tones_play(SOUND_LEVEL_START);
}

void process_map_tile(u8 x, u8 y, u8 t)
{
    if(t < 240) return;

    if(t == TILE_PLAYER)
    {
        // set initial player/camera position
        px = x * 16 + PXOFF;
        py = y * 16 + PYOFF;
        camx = px - CAMERA_OFFSET_X + CAMERA_OFFSET_X_DELTA;
        camy = py - CAMERA_OFFSET_Y;
        float xmax = map_width * 16 - 129;
        float ymax = map_height * 16 - 65;
        if(camx < 0) camx = 0;
        if(camy < 0) camy = 0;
        if(camx > xmax) camx = xmax;
        if(camy > ymax) camy = ymax;
        dcamx = 0;
    }
    else if(t == TILE_COIN)
    {
        add_object({ OBJ_COIN, x * 16, y * 16, 3, 3, 10, 10 });
    }
    else if(t == TILE_KEY)
    {
        add_object({ OBJ_KEY, x * 16, y * 16, 2, 4, 12, 8 });
    }
    else if(t == TILE_HEART)
    {
        add_object({ OBJ_HEART, x * 16, y * 16, 2, 3, 12, 10 });
    }
    else if(t >= TILE_MOB && t <= TILE_MOB_HELM)
    {
        u8 xo = 3;
        u8 yo = 5;
        if(t == TILE_MOB_HELM)
        {
            xo = 2;
            yo = 3;
        }
        add_object({ t - 240, x * 16, y * 16, xo, yo, 16 - xo * 2, 16 - yo, true });
    }
}

void add_object(map_object_t obj)
{
    for(u8 i = 0; i < MAX_OBJECTS; ++i)
    {
        if(objects[i].type == OBJ_NONE)
        {
            objects[i] = obj;
            return;
        }
    }
}

u8[8 * 32] prog map0 = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 81, 82, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 82, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 0, 81, 82, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            108, 0, 241, 0, 242, 0, 1, 3, 0, 249, 0, 52, 0, 251, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            2, 2, 2, 2, 2, 2, 53, 5, 2, 2, 2, 2, 2, 2, 2, 53, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
};

map_info_t[1] prog maps = {
    { map0, 32, 8 },
};
