// frame counter: increments each frame
u8 frame_count;

constexpr u8 STATE_MENU = 0;
constexpr u8 STATE_INTRO = 1;
constexpr u8 STATE_LEVEL = 2;
constexpr u8 STATE_PAUSE = 3;
u8 state;

// camera position and velocity
float camx, camy, dcamx;

// current score
saved u16 score;

// index of current map
u8 current_map;

// cached for performance
u8 map_width;
u8 map_height;

// how many keys the player is holding
u8 keys;

u8 invincibility_frames;

u8 jump_frames_remaining;

// animation showing at level start
u8 level_start_frames;

// death animation
u8 death_frames;
constexpr u8 DEATH_PAUSE_FRAMES = 30;
constexpr u8 DEATH_JUMP_FRAMES = 70;
constexpr u8 DEATH_TOTAL_FRAMES = DEATH_PAUSE_FRAMES + DEATH_JUMP_FRAMES;
constexpr float DEATH_VEL = 3.25;

// after mob processing, whether the player jumped on a mob
bool mob_jumped;

// tiles
constexpr u8 TILE_AIR_UP    = 177;
constexpr u8 TILE_AIR_RIGHT = 178;
constexpr u8 TILE_PLAYER    = 240;
constexpr u8 TILE_COIN      = 241;
constexpr u8 TILE_KEY       = 242;
constexpr u8 TILE_DOOR1     = 243;
constexpr u8 TILE_DOOR2     = 244;
constexpr u8 TILE_SPRING    = 245;
constexpr u8 TILE_MOB       = 248;
constexpr u8 TILE_MOB_HORN  = 249;
constexpr u8 TILE_MOB_HELM  = 250;

// map objects
constexpr u8 MAX_OBJECTS = 20;
constexpr u8 OBJ_NONE     = 0;
constexpr u8 OBJ_COIN     = 1;
constexpr u8 OBJ_KEY      = 2;
constexpr u8 OBJ_SPRING   = 5;
constexpr u8 OBJ_MOB      = 8;
constexpr u8 OBJ_MOB_HORN = 9;
constexpr u8 OBJ_MOB_HELM = 10;
struct map_object_t
{
    u8 type;
    i16 x, y; // sprite position
    u8 xo, yo, w, h; // bounding box

    // for mobs
    bool moving_right;
    u8 death_frames;
};
map_object_t[MAX_OBJECTS] objects;

constexpr u8 MOB_DEATH_FRAMES = 20;

// player position and velocity
float px, py, vx, vy;

// flags for rendering player
bool player_facing_right;
bool player_moving;
u8 player_on_ground;

//
// Constants for player rendering
//

// player half extents (sides)
constexpr float PHEH = 7;

// player half extents (top/bottom)
constexpr float PHEV = 6;

// player sprite offset
constexpr float PXOFF = 8;
constexpr float PYOFF = 10;

constexpr float CAMERA_OFFSET_X = 64;
constexpr float CAMERA_OFFSET_X_DELTA = 32;
constexpr float CAMERA_OFFSET_Y = 34;
constexpr float CAMERA_OFFSET_Y_DELTA_UP = 22;
constexpr float CAMERA_OFFSET_Y_DELTA_DOWN = 26;

// camera motion smoothing parameters
constexpr float CAMERA_UPDATE_X_OMEGA = 15;
constexpr float CAMERA_UPDATE_X_ZETA = 1;
constexpr float CAMERA_UPDATE_X_ALPHA = CAMERA_UPDATE_X_OMEGA * CAMERA_UPDATE_X_OMEGA;
constexpr float CAMERA_UPDATE_X_BETA = CAMERA_UPDATE_X_OMEGA * CAMERA_UPDATE_X_ZETA * 2;
constexpr float CAMERA_UPDATE_X_DT = 0.01;
constexpr float CAMERA_UPDATE_Y_FACTOR = 0.1;

//
// Constants for player dynamics
//

constexpr float GRAVITY = 0.2;

constexpr float FAN_AIR_VEL = 1.5;
constexpr float FAN_AIR_FACTOR = 0.25;

// player horizontal acceleration: on the ground or in the air
constexpr float PLAYER_MOVE_ACCEL = 0.25;
constexpr float PLAYER_MOVE_AIR_ACCEL = 0.125;

// vertical velocity when jumping and not moving fast
constexpr float PLAYER_JUMP_VEL = 1.9;
constexpr float PLAYER_JUMP_VEL_FAST = 2.3;
constexpr float PLAYER_FAST_VEL = 1.7;

constexpr float PLAYER_SPRING_VEL = 5.2;

// frames that the player can hold down A to extend jump
constexpr u8 PLAYER_JUMP_FRAMES = 15;

// velocity clamps
constexpr float PLAYER_MAX_VEL_X = 2.0;
constexpr float PLAYER_MAX_VEL_Y = 6.0;

// friction: coefficient of velocity applied to acceleration
constexpr float PLAYER_FRICTION = 0.15;
constexpr float PLAYER_FRICTION_AIR = 0.05;

// grace frames for allowing jumps after a player leaves ground
constexpr u8 PLAYER_ON_GROUND_FRAMES = 5;
